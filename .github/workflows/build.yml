name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is not commonly used
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        
        # Set binary name based on OS
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="objectsync-$GOOS-$GOARCH.exe"
        else
          BINARY_NAME="objectsync-$GOOS-$GOARCH"
        fi
        
        # Build with version info
        BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        GIT_COMMIT=$(git rev-parse --short HEAD)
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
          VERSION="dev-$GIT_COMMIT"
        fi
        
        go build -ldflags "-s -w -X 'main.Version=$VERSION' -X 'main.BuildTime=$BUILD_TIME' -X 'main.GitCommit=$GIT_COMMIT'" \
          -o "dist/$BINARY_NAME" ./cmd/main.go
        
        # Verify the binary
        if [ "$GOOS" = "linux" ] && [ "$GOARCH" = "amd64" ]; then
          ./dist/$BINARY_NAME --version || echo "Binary built but version check failed"
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: objectsync-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/objectsync-* 